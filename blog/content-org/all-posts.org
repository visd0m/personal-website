#+hugo_base_dir: ../
#+author: visd0m

* whoami                                                            :@resume:
:PROPERTIES:
:EXPORT_FILE_NAME: whoami
:END:

** Professional life

*** the education era

Everything started with me attending a language high school in Turin, Italy.

After the high school I attended the computer science course at the University of Turin, where I got a bachelore degreee with a thesis about the experience I had as intern, 3 months of work as a android developer in the startup [[https://www.eversnapapp.com/][Eversnap]] in San Jose, California.

*** the Satispay era

[[https://www.satispay.com/en-it/][Satispay]] is a startup based in Milan with the mission of rewrite the history of mobile payments and I joined it in 2015 while I was still writing my bachelore degree thesis.

I worked there for 4 years, till 2019.
In those 4 years I covered several roles, from mobile developer (IOS, Android) to backend developer, passing by java desktop application developer.
Java ‚òï everywhere.

It has been an amazing experience for me since I have been able to develop the full stack of the application from backend apis to client UIs, with a taste of ol' good devops experience.

*** the Prima era

From 2019 I joined [[https://www.prima.it/][Prima]] an insurtech company where I am still working at the moment.

Here I worked both on the frontend and on the backend, with the great pleasure of using a really interesting stack of technologies.

Some highlights:
- backend services in Elixir ‚öóÔ∏è
- backend services in Rust ü¶Ä
- frontend SPAs in Elm üå≥
- GraphQL and GRPC as communication protocols üóûÔ∏è
- CQRS + ES pattern üìÉ

Always in Prima, I am starting a new adventure as engineering manager.

** Personal life

From a personal perspective I am Domenico Visconti.
I live in Lecco, Italy with my girlfriend and my dachsund üå≠ dog. 
[[file:woody.jpg]]

I used to like to take macro pictures, honestly I am not really active lately because I have to update my gear to keep up with the current time.

I am really into videogames since I was a child, basically I am a video game player with more than 20 years of experience.

In the last years I fell in love with emacs, I can consider myself an emacs ambassador (even now I am writing this blog post in an org file using emacs and then exporting the org to a markdown hugo compatible format).

I used to practice sports when I was younger, I practiced basketball, tennis and boxing.
At the moment I can say that time has passed and the shape of my free time changed when I started working.
Let's say that I decided to allocate my free time to other activities rather than sports.

AAAnd that's it. This is me.

Stay tuned if you are interested in software development, videogames or emacs tips and tricks.

Cheers!

* how to blogpost directly from emacs :@emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: how-to-blogpost-directly-from-emacs
:END:

** Why even do that?
If you like emacs and you are an emacs user at a certain point in your life you will reach that moment in which you try to do as much as you can directly from emacs.

No easy explanation on why this happens, but I give you my personal view on it.

One start using a version of emacs that is far from being the perfect version of emacs for him.

Using it day by day you start customizing it and extending it making it fit your workflows and your needs.

This create the following positive loop:
- "I am not able to do X with emacs"
- "I have fun customizing emacs in order to do X with emacs"
- "I end up having a good enough workflow of doing X in emacs"
- "I get used of doing X in emacs"

Replace X with blogposting and you have your answer.

** How to blog post from emacs
Ok, here is my workflow.

1. I write my post in an org file (emacs users love org files ü¶Ñ)
2. I export my org file to a Hugo compatible markdown file
3. The local running hugo server automagically renders the new version of the blog post
4. When I am happy with my new blogpost I merge the changes in the main branch of my GitHub repo
5. A GitHub Action runs when new changes are pushed on the main branch generating the new version of the public website and deploys it to GitHub Pages

Not bad ha?

If you like it, and you are still reading, in the next section you can find out the ingredients needed for this recipe.

*** First ingredient: the static site generator [[https://gohugo.io/][Hugo]]
Nothing to say about it, it just works out of the box.

Furthermore [[https://themes.gohugo.io/][here]] there are several free cool themes available that you can use to style your static website without too much work.

*** Second ingredient: a way to produce a Hugo compatible markdown file starting from an org file [[https://ox-hugo.scripter.co/][ox-hugo]]
Here is where the magic happens, this emacs package allows to ~org-export-dispatch~ the org file into a Hugo compatible markdown file.

Nothing too complex to setup this package, here is the snippet needed to add it to your emacs-configuration using ~use-package~
#+begin_src emacs-lisp
(use-package ox-hugo
    :ensure t
    :pin melpa
    :after ox)
#+end_src

No other complex things to do to make these two working together, really I just followed this [[https://ox-hugo.scripter.co/doc/quick-start/][Quick Start]] to setup my first project and everything worked without issues.

In any case you will end up having one or multiple org files that will contain the source text for your blog posts.

*** Mixing together
We are almost there, bear with me!

Start the Hugo server within a shell with the following command
#+begin_src bash
hugo server --buildDrafts --navigateToChanged
#+end_src

Edit the source files to update your blog posts.

Export the content via ~org-export-dispatch~ and let Hugo render the new content üßë‚Äçüç≥üòôü§å.

*** The last ingredient: the GitHub Action
If you plan to version you blog post code on GitHub and serve it through GitHub Pages this might be the last piece of the puzzle.

It's fairly easy to setup a dedicated GitHub action that generates and deploys the new version of your static blog post when new changes are pushed to the main branch.
If you want to do it just follow the new workflow creation in GitHub.

A blueprint for Hugo is already available and works out of the box.

And that's it! You are all set up üéâ.

I hope that you can start blogposting from emacs too ü¶æ.

Cheers!
